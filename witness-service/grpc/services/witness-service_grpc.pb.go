// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services/witness-service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WitnessService_Query_FullMethodName          = "/services.WitnessService/Query"
	WitnessService_FetchByHeights_FullMethodName = "/services.WitnessService/FetchByHeights"
)

// WitnessServiceClient is the client API for WitnessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WitnessServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	FetchByHeights(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type witnessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWitnessServiceClient(cc grpc.ClientConnInterface) WitnessServiceClient {
	return &witnessServiceClient{cc}
}

func (c *witnessServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, WitnessService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witnessServiceClient) FetchByHeights(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WitnessService_FetchByHeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WitnessServiceServer is the server API for WitnessService service.
// All implementations must embed UnimplementedWitnessServiceServer
// for forward compatibility.
type WitnessServiceServer interface {
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	FetchByHeights(context.Context, *FetchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWitnessServiceServer()
}

// UnimplementedWitnessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWitnessServiceServer struct{}

func (UnimplementedWitnessServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedWitnessServiceServer) FetchByHeights(context.Context, *FetchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByHeights not implemented")
}
func (UnimplementedWitnessServiceServer) mustEmbedUnimplementedWitnessServiceServer() {}
func (UnimplementedWitnessServiceServer) testEmbeddedByValue()                        {}

// UnsafeWitnessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WitnessServiceServer will
// result in compilation errors.
type UnsafeWitnessServiceServer interface {
	mustEmbedUnimplementedWitnessServiceServer()
}

func RegisterWitnessServiceServer(s grpc.ServiceRegistrar, srv WitnessServiceServer) {
	// If the following call pancis, it indicates UnimplementedWitnessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WitnessService_ServiceDesc, srv)
}

func _WitnessService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WitnessService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitnessService_FetchByHeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitnessServiceServer).FetchByHeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WitnessService_FetchByHeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitnessServiceServer).FetchByHeights(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WitnessService_ServiceDesc is the grpc.ServiceDesc for WitnessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WitnessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.WitnessService",
	HandlerType: (*WitnessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _WitnessService_Query_Handler,
		},
		{
			MethodName: "FetchByHeights",
			Handler:    _WitnessService_FetchByHeights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/witness-service.proto",
}
